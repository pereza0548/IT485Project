## combining methods

from flask import Flask, jsonify, request       ##imported jsonify and request
import requests

app = Flask(__name__)       # Get a flask object named app



# 1_ Define a route to Search for an album by name. Returns album matches sorted by relevance
def Data_albumsearch(album):                                        
    API_KEY = '7cb9f9c0c97c61c2c14e43cb6c0db5d4'
    USER_AGENT = 'AAMoussaA'

    headers = {
    'user-agent' : USER_AGENT            # Here I created a dictionary for the headers parameter
    }

    payload = {                             # Here I created a dictionary for the params parameter 
                                            # Specifying the key to Identify myself to the API,
    'method'  : 'album.search',             # The method to be used for the process, and the format
    'album' : 'Thriller',                    
    'api_key' : API_KEY
    #'format'  : 'json'                       # the data returned should be in.
    }

    ## for the url I added the params from the payload so that I could get rid of the app route, which is now at the bottom of the code
    r = requests.get('http://ws.audioscrobbler.com/2.0/?method=album.search&api_key=API_KEY&format=json', headers=headers, params= payload)
    Data = r.json()
    return Data 

# 2_ Define a route to Get the metadata and tracklist for an album on Last.fm using the album name or a musicbrainz id.
def Data_albumgetinfo(album):                                        
    API_KEY = '7cb9f9c0c97c61c2c14e43cb6c0db5d4'
    USER_AGENT = 'AAMoussaA'

    headers = {
    'user-agent' : USER_AGENT            # Here I created a dictionary for the headers parameter
    }

    payload = {                             # Here I created a dictionary for the params parameter 
                                            # Specifying the key to Identify myself to the API,
    'method'  : 'album.getInfo',             # The method to be used for the process, and the format
    'artist'  : 'Michael Jackson',
    'album' : 'Thriller',                    
    'api_key' : API_KEY,
    'format'  : 'json'                       # the data returned should be in.
    }

    r = requests.get('http://ws.audioscrobbler.com/2.0/?method=album.getinfo&api_key=API_KEY&format=json', headers=headers, params= payload)
    Data = r.json()
    return Data 

###############################################################################

## function that combines the two methods using a switch statement
def combine_methods(method, album):
    method_functions = {
        'album.search': Data_albumsearch,
        'album.getInfo': Data_albumgetinfo
    }

    ## returns error message if wrong
    ## I think this is where the error is, but I can't figure out why
    if method in method_functions:
        return method_functions[method](album)
    else:
        return {'error': 'Invalid method'}


@app.route('/lastfm', methods=['GET'])
def lastfm_combined_api():
    method = request.args.get('method')
    album = request.args.get('album')

    result = combine_methods(method, album)
    return jsonify(result)


if __name__ =='__main__':
    app.run(debug=True, port=8000)
